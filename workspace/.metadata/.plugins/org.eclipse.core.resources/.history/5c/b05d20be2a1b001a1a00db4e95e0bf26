import java.io.BufferedReader; 
import java.io.IOException; 
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class ProblemaA  
{ 
	private static int[] arreglo; // Cada entrada menor a 10^6 < 2x10^9 ~ 2^32
	private static int[] sufArr;  // Cada entrada menor a N < 10^5 < 2x10^9 ~ 2^32
	private static int[] invSA;  // Cada entrada menor a N < 10^5 < 2x10^9 ~ 2^32
	private static int[] rankOfS;
	
	private static int[] longComPreArr;  // Cada entrada menor a N < 10^5 < 2x10^9 ~ 2^32
	
    public static void main(String[] args) throws IOException  
    { 
        BufferedReader reader =  new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st; 
        
        int N = Integer.parseInt(reader.readLine());
        
        while (N != 0) {
        	// Leer arreglo de numeros
        	arreglo = new int[N];
        	st = new StringTokenizer(reader.readLine()); 
        	for (int i = 0; i < N; i++) {
        		arreglo[i] = Integer.parseInt(st.nextToken());
        		System.out.println(arreglo[i]);
        	}
        	
        	// Hallar el Suffix Array
        	calcularSA();
        	
        	// Hallar el Longest Common Prefix Array usando el SA
        	
        	// Hallar el maximo del LCP
        }
  
    }
    
    private static void calcularSA() {
    	int n = arreglo.length;
    	Suffix[] su = new Suffix[n]; 
        
        for (int i = 0; i < n; i++)  
        { 
            su[i] = new Suffix(i, s.charAt(i) - '$', 0); 
        } 
        for (int i = 0; i < n; i++)  
            su[i].next = (i + 1 < n ? su[i + 1].rank : -1); 
  
        Arrays.sort(su); 

         
        int[] ind = new int[n]; 
          
        for (int length = 4; length < 2 * n; length <<= 1)  
        { 
            int rank = 0, prev = su[0].rank; 
            su[0].rank = rank; 
            ind[su[0].index] = 0; 
            for (int i = 1; i < n; i++) 
            { 
                if (su[i].rank == prev && 
                    su[i].next == su[i - 1].next) 
                { 
                    prev = su[i].rank; 
                    su[i].rank = rank; 
                }  
                else 
                {  
                    prev = su[i].rank; 
                    su[i].rank = ++rank; 
                } 
                ind[su[i].index] = i; 
            } 
              
            for (int i = 0; i < n; i++)  
            { 
                int nextP = su[i].index + length / 2; 
                su[i].next = nextP < n ?  
                   su[ind[nextP]].rank : -1; 
            } 
            
            Arrays.sort(su);
    	
    }
        
        public static class Sufijo {
        	
        }
}